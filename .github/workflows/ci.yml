---
name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  uv-example-multiplatform:
    name: python-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Set up uv
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up uv
        if: ${{ matrix.os == 'windows-latest' }}
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: powershell
      - name: Minimize uv cache
        run: uv cache prune --ci
      - name: Set up Python
        run: uv python install
      - name: Install project dependencies
        run: uv venv
      - name: Run ruff linter
        run: uv run ruff .
      - name: Run yamlfix
        run: uv run yamlfix .
      - name: Run pytype static analysis
        run: uv run pytype .
      - name: Build application with PyInstaller
        run: pyinstaller main.py --onefile --name MyApp --distpath dist/${{ matrix.os }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: MyApp-${{ matrix.os }}
          path: dist/${{ matrix.os }}/MyApp*
